---
import {
  PUBLIC_GA_TRACKING_ID,
  PUBLIC_ADS_ID,
  ENABLE_LIGHTBOX,
} from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import FooterNavLink from '../components/FooterNavLink.astro'
import GoogleADS from '../components/GoogleADS.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(path, Astro.site).toString()
const siteOGImage = new URL('/default-og-image.png', Astro.site)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}

// const asidePaddingTop = coverImageURL ? '200px' : '30px'
const asidePaddingTop = '30px'
---

<!DOCTYPE html>
<html lang="ja" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link rel="icon" href="/favicon/favicon.ico" type="image/x-icon" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <GoogleADS adsId={PUBLIC_ADS_ID} />
    <div class="container">
      <main>
        {
          coverImageURL && (
            <div class="cover">
              <img src={coverImageURL} />
            </div>
          )
        }

        <div class="content">
          <header>
            <h1>
              <a href={getNavLink('/')}>
                {
                  database.Icon && database.Icon.Type === 'emoji' ? (
                    <>
                      <span>{database.Icon.Emoji}</span>
                      {database.Title}
                    </>
                  ) : database.Icon && database.Icon.Type === 'external' ? (
                    <>
                      <img src={database.Icon.Url} />
                      {database.Title}
                    </>
                  ) : database.Icon && database.Icon.Type === 'file' ? (
                    <>
                      <img src={customIconURL} class="custom-icon" />
                      {database.Title}
                    </>
                  ) : (
                    database.Title
                  )
                }
              </a>
            </h1>
            <div class="description">
              {database.Description}
            </div>
          </header>

          <slot name="main" />

          <footer>
            <div>
              Â© Copyright
              {' '}
              {new Date().getFullYear()}
              {' '}
              {siteTitle}
            </div>
            <div>
              <span>Powered by</span>
              <a href="https://github.com/otoyo/astro-notion-blog"
                >astro-notion-blog</a
              >
            </div>
          </footer>
        </div>
      </main>

      <aside>
        <div>
          <div class="logo">
            <a href="/">
              <img src="/Logo.png" alt="dev.nuovotaka" />
            </a>
          </div>
          <nav class="nav-link">
            <ul>
              <li><a href="/">Home</a></li>
              <li><a href="//nuovotaka.com">Nuovotaka</a></li>
              <li><a href="/about">About</a></li>
              <li><a href="/privacy">Privacy</a></li>
            </ul>
            <div class="dark-theme">
              <div class="check">
                <input type="checkbox" id="switch" name="theme" />
                <label for="switch"></label>
              </div>
            </div>
          </nav>
        </div>
        <slot name="aside" />
      </aside>
      <FooterNavLink />
    </div>

    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style define:vars={{ asidePaddingTop }}>
  .container {
    display: flex;
    min-height: 100vh;
    align-items: flex-start;
  }
  @media (max-width: 640px) {
    .container {
      display: block;
    }
  }

  main {
    flex: 1;
    order: 2;
    justify-content: space-between;
  }
  @media (max-width: 640px) {
    main {
      order: 1;
    }
  }

  aside {
    order: 1;
    width: 300px;
    position: sticky;
    top: 0;
    padding: var(--asidePaddingTop) 20px 20px;
    color: var(--aside-color);
    background-color: var(--aside-bg);
  }
  @media (max-width: 640px) {
    aside {
      order: 2;
      width: 100%;
      padding: 40px 20px 20px;
    }
  }

  .logo img {
    width: 30%;
    height: 30%;
    border-radius: 50%;
  }

  .nav-link ul {
    list-style-type: none;
  }
  @media (max-width: 640px) {
    .logo img {
      display: none;
    }
    .nav-link ul {
      display: none;
    }
  }

  .dark-theme {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 100;
    border: 1px solid rgba(255, 255, 255, 0.4);
    border-right: 1px solid rgba(255, 255, 255, 0.2);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 10px 0px 0px 10px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(4px);
    box-shadow: 0 5px 45px rgba(0, 0, 0, 0.1);
  }

  div.cover {
  }
  div.cover img {
    display: block;
    width: 100%;
    height: 20vh;
    object-fit: cover;
    object-position: center 60%;
  }

  div.content {
    padding: 20px 40px;
  }
  @media (max-width: 640px) {
    div.content {
      padding: 0 18px;
    }
  }

  main header {
    padding: 20px 0 20px;
  }
  main header h1 {
    font-weight: 700;
    color: var(--fg);
  }
  main header h1 a {
    display: block;
    color: inherit;
  }
  main header h1 a:hover {
    color: inherit;
  }
  main header h1 a span,
  main header h1 a img {
    display: inline-block;
    font-size: 1.1em;
  }
  main header h1 a span {
    margin-right: 0.3em;
    margin-left: -0.1rem;
  }
  main header h1 a img {
    width: 1.2em;
    height: 1.2em;
    margin-right: 0.2em;
    margin-left: -0.3rem;
    vertical-align: sub;
  }
  main header h1 a img.custom-icon {
    border-radius: var(--radius);
  }

  main header div.description {
    padding: 0.3rem 0 0.6rem;
    font-size: 0.95rem;
  }

  main footer {
    margin: 30px 0 10px;
    text-align: center;
    font-size: 0.75rem;
  }
  @media (max-width: 640px) {
    main footer {
      margin: 0 auto 30px;
    }
  }
  main footer span {
    color: #777;
  }
  main footer a {
    color: inherit;
    text-decoration: underline;
  }

  .check {
    position: relative;
  }
  input[type='checkbox'] {
    height: 50px;
    width: 70px;
    border-radius: 30px;
    -webkit-appearance: none;
    outline: none;
    /* background: white; */
    transition: 0.6s ease;
    cursor: pointer;
  }
  input[type='checkbox']::after {
    content: url('https://api.iconify.design/ph/sun.svg?color=%23fb923c&width=35&height=35');
    position: absolute;
    top: 10px;
    right: 20px;
  }
  input[type='checkbox']:checked::after {
    content: url('https://api.iconify.design/ph/moon.svg?color=white&width=35&height=35');
    position: absolute;
    top: 10px;
    right: 18px;
  }
</style>

<style is:global>
  :root {
    --gap-quarter: 0.25rem;
    --gap-half: 0.5rem;
    --gap: 1rem;
    --gap-double: 2rem;

    --bg: #fff;
    --fg: #333;
    --list-color: #222;
    --accents-1: #666;
    --accents-2: #666;
    --accents-3: #666;
    --geist-foreground: #000;
    --geist-success: #690;

    --pagination-hover: #ddd;
    --pagination-active: #999;
    --pagination-bg: #f4f4f4;

    --radius: 4px;

    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
      'Helvetica Neue', sans-serif;
    --font-mono: SFMono-Regular, Menlo, Consolas, 'PT Mono', 'Liberation Mono',
      Courier, monospace;
  }

  * {
    box-sizing: border-box;
    word-break: break-word;
  }

  html[data-theme='dark'] {
    --bg: #333;
    --fg: #fff;
    --aside-color: #ddd;
    --aside-bg: #232323;
    --code: #333;
    --accents-3: #ddd;
    --postslink-hover: #aaa;
    --pagination-hover: #333;
    --pagination-active: #666;
    --pagination-bg: #232323;
    --listitem-color: #ddd;
    --bookmark-border: rgba(255, 255, 255, 0.608);
  }

  html[data-theme='light'] {
    --bg: #fff;
    --fg: #333;
    --aside-color: #000;
    --aside-bg: #f4f4f4;
    --code: #333;
    --accents-3: #666;
    --postslink-hover: #ddd;
    --pagination-hover: #ddd;
    --pagination-active: #999;
    --pagination-bg: #f4f4f4;
    --listitem-color: #222;
    --bookmark-border: rgba(55, 53, 47, 0.16);
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-size: 16px;
  }

  body {
    min-height: 100vh;
    background: var(--bg);
    color: var(--fg);
    font-family: ui-sans-serif, -apple-system, BlinkMacSystemFont, 'Segoe UI',
      Helvetica, 'Hiragino Sans', 'Hiragino Kaku Gothic ProN',
      'Hiragino Sans GB', ã¡ã¤ãªãª, Meiryo, 'Apple Color Emoji', Arial,
      sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';

    /*background-image: radial-gradient(#ddd 1px, transparent 1px),
      radial-gradient(#ddd 1px, transparent 1px);*/
    background-position: 0 0, 25px 25px;
    background-attachment: fixed;
    background-size: 50px 50px;

    /* Hack */
    overflow-x: hidden;

    -webkit-font-smoothing: antialiased;
  }

  figure {
    margin: 0;
    font-size: 0.85rem;
    color: #999;
    line-height: 1.8rem;
  }

  a {
    color: var(--accents-1);
    text-decoration: none;
  }
  a:hover {
    color: var(--accents-1);
  }

  mark {
    padding: var(--gap-quarter);
    border-radius: var(--radius);
    background: rgba(247, 212, 255, 0.8);
  }

  h1 {
    margin: 0;
    color: var(--fg);
    font-size: 2rem;
    font-weight: 700;
  }

  h2 {
    margin: 0;
    color: var(--fg);
    line-height: 1.3;
    font-size: 1.2rem;
    font-weight: normal;
  }
  h2 > span.tag {
    border-radius: 4px;
    padding: 3px 9px;
    background: rgba(227, 226, 224, 0.5);
  }

  h3 {
    margin: 0;
    color: var(--fg);
    font-size: 1.2rem;
    font-weight: 700;
  }

  @media (max-width: 640px) {
    h1 {
      font-size: 1.6rem;
    }

    h2 {
      font-size: 1.15rem;
    }

    h3 {
      font-size: 1.15rem;
    }
  }

  ol {
    color: var(--listitem-color);
    font-weight: 400;
    font-size: 0.9rem;
    line-height: 1.8rem;
  }
  p,
  ul {
    color: var(--listitem-color);
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.8rem;
  }
  ul,
  ol {
    margin: 0;
    padding-inline-start: 1.5rem;
  }
  pre {
    margin: 0;
    white-space: pre;
    tab-size: 2;
  }
  pre :global(code) {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  hr {
    display: block;
    height: 1px;
    border: 0;
    margin: 0.3rem 0;
    background-color: #333;
  }

  code {
    font-size: 0.9rem;
    background: #f1f1f1;
    color: #eb5757;
    padding: 0.25rem;
    border-radius: var(--radius);
    font-family: var(--font-mono);
  }

  table {
    color: var(--listitem-color);
    border-collapse: collapse;
  }

  table tr {
    vertical-align: middle;
  }

  table th {
    font-weight: 600;
    background-color: #f4f4f4;
  }

  table td,
  table th {
    font-size: 0.9rem;
    border: 1px solid #e4e4e4;
    padding: 0.5rem 1rem;
    line-height: 1.2rem;
  }
</style>

<script is:inline>
  const osDark = window.matchMedia('(prefers-color-scheme: dark)')
  const modeSwitch = document.getElementById('switch')
  function darkModeOn() {
    document.documentElement.setAttribute('data-theme', 'dark')
    modeSwitch.checked = true
  }
  function darkModeOff() {
    document.documentElement.setAttribute('data-theme', 'light')
    modeSwitch.checked = false
  }
  const listener = (event) => {
    if (event.matches) {
      darkModeOn()
    } else {
      darkModeOff()
    }
  }
  osDark.addEventListener('change', listener)
  listener(osDark)
  modeSwitch.addEventListener('change', () => {
    if (modeSwitch.checked) {
      darkModeOn()
      style = 'dark'
    } else {
      darkModeOff()
      style = 'light'
    }
    localStorage.setItem('data-theme', style)
  })
  if (localStorage.getItem('data-theme') === 'dark') {
    darkModeOn()
  } else if (localStorage.getItem('data-theme') === 'light') {
    darkModeOff()
  }
</script>
